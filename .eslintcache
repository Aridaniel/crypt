[{"C:\\Users\\johan\\Documents\\Skóli\\Projects\\Module 4\\crypt\\src\\App.js":"1","C:\\Users\\johan\\Documents\\Skóli\\Projects\\Module 4\\crypt\\src\\components\\Chat.js":"2","C:\\Users\\johan\\Documents\\Skóli\\Projects\\Module 4\\crypt\\src\\index.js":"3"},{"size":2191,"mtime":1607382413162,"results":"4","hashOfConfig":"5"},{"size":3078,"mtime":1607436709534,"results":"6","hashOfConfig":"5"},{"size":205,"mtime":1606686559601,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1kl6oql",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\johan\\Documents\\Skóli\\Projects\\Module 4\\crypt\\src\\App.js",["15","16","17"],"C:\\Users\\johan\\Documents\\Skóli\\Projects\\Module 4\\crypt\\src\\components\\Chat.js",["18"],"import React, {useState, useEffect} from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nfunction Chat(props) {\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const ENDPOINT = 'localhost:5000';\r\n\r\n  // Retrieve data that the users entered when joining\r\n  useEffect(() => {\r\n    console.log('Username is: ' + props.chatData.name);\r\n    //const {name, room} = queryString.parse(props.location.search);\r\n    const {name, room} = props.chatData;\r\n    // We can emit different events using this instance of socket\r\n    // Header added for the cors block error....\r\n    socket = io(ENDPOINT, {\r\n      withCredentials: true,\r\n      extraHeaders: {\r\n        'my-custom-header': 'abcd'\r\n      }\r\n    });\r\n\r\n    // Set the name and room state on connection\r\n    // setName(name);\r\n    // setRoom(room);\r\n\r\n    // Passing the object {name: name, room: room} using the es6 syntax\r\n    // Using the callback function in join with the error object\r\n    // Todo if name is taken: reroute to '/' path?\r\n    socket.emit('join', { name, room }, (obj) => {\r\n      // Alert error if error callback\r\n      if(obj !== undefined) {\r\n        //alert(obj.error);\r\n        props.setLogin(obj.error);\r\n      }\r\n    });\r\n\r\n    // This will happen on the component unmount i.e. when the user leaves the chat\r\n    return () => {\r\n      // Bann bann að kalla á emit með disconnect skv. documentation?\r\n      // socket.emit('disconnect');\r\n      // Turns the socket instance off\r\n      // socket.disconnect();\r\n    }\r\n  }, [ENDPOINT, props.chatData]);\r\n\r\n  // Runs at mount and each time messages update\r\n  useEffect(() => {\r\n    socket.on('message', (message) => {\r\n      setMessages(messages => [...messages, message]);\r\n    });\r\n    //console.log('MsgsLen: ' + messages.length);\r\n  }, []);\r\n\r\n  //console.log('msgs: ' + messages);\r\n  // Function for sending messages\r\n  function sendMessage(ev) {\r\n    ev.preventDefault();\r\n    const messageSent = `${( \"0\" + (new Date().getHours())).slice(-2)}:${(\"0\" + (new Date().getMinutes())).slice(-2)}`;\r\n    const messageObj = {text: message, timeStamp: messageSent};\r\n\r\n    if(message) {\r\n      socket.emit('sendMessage', messageObj, () => setMessage('')); // Last parameter is the callback that is called in the server 'sendMessage' event and once its called message is set to ''\r\n    }\r\n  }\r\n\r\n  //console.log(message, messages);\r\n  const msgList = messages.map((msg, index) => <li key={index + msg.user}><span className=\"chat__user\">{msg.timeStamp + ' [' + msg.user + '] '}</span>{' - ' + msg.text}</li>);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat__messages\">\r\n        <ul>\r\n          {\r\n            msgList\r\n          }\r\n        </ul>\r\n        <div className=\"input__wrapper\">\r\n          <p className=\"chat__goggurinn\">{\">\"}</p>\r\n          <input className=\"chat__input\" autoFocus value={message} onChange={(ev) => setMessage(ev.target.value)} onKeyPress={(ev) => ev.key === 'Enter' ? sendMessage(ev) : null} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;","C:\\Users\\johan\\Documents\\Skóli\\Projects\\Module 4\\crypt\\src\\index.js",[],{"ruleId":"19","severity":1,"message":"20","line":29,"column":6,"nodeType":"21","endLine":29,"endColumn":8,"suggestions":"22"},{"ruleId":"23","severity":1,"message":"24","line":51,"column":13,"nodeType":"25","endLine":51,"endColumn":140},{"ruleId":"23","severity":1,"message":"24","line":56,"column":11,"nodeType":"25","endLine":56,"endColumn":113},{"ruleId":"19","severity":1,"message":"26","line":47,"column":6,"nodeType":"21","endLine":47,"endColumn":32,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isMobile'. Either include it or remove the dependency array.","ArrayExpression",["28"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["29"],{"desc":"30","fix":"31"},{"desc":"32","fix":"33"},"Update the dependencies array to be: [isMobile]",{"range":"34","text":"35"},"Update the dependencies array to be: [ENDPOINT, props, props.chatData]",{"range":"36","text":"37"},[924,926],"[isMobile]",[1558,1584],"[ENDPOINT, props, props.chatData]"]