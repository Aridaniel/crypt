[{"/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/App.js":"1","/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/index.js":"2","/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/components/Chat.js":"3","/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/components/Currency.js":"4"},{"size":2116,"mtime":1607376559385,"results":"5","hashOfConfig":"6"},{"size":196,"mtime":1606692818663,"results":"7","hashOfConfig":"6"},{"size":2973,"mtime":1607346990180,"results":"8","hashOfConfig":"6"},{"size":1348,"mtime":1607379188360,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"s2pdn0",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/App.js",["19","20","21"],"/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/index.js",[],"/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/components/Chat.js",["22","23"],"import React, {useState, useEffect} from 'react';\nimport io from 'socket.io-client';\n\nlet socket;\n\nfunction Chat(props) {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [userList, setUserList] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n\n  // Retrieve data that the users entered when joining\n  useEffect(() => {\n    console.log('Username is: ' + props.chatData.name);\n    //const {name, room} = queryString.parse(props.location.search);\n    const {name, room} = props.chatData;\n    // We can emit different events using this instance of socket\n    // Header added for the cors block error....\n    socket = io(ENDPOINT, {\n      withCredentials: true,\n      extraHeaders: {\n        'my-custom-header': 'abcd'\n      }\n    });\n\n    // Set the name and room state on connection\n    // setName(name);\n    // setRoom(room);\n\n    // Passing the object {name: name, room: room} using the es6 syntax\n    // Using the callback function in join with the error object\n    // Todo if name is taken: reroute to '/' path?\n    socket.emit('join', { name, room }, (obj) => {\n      // Alert error if error callback\n      if(obj !== undefined) {\n        alert(obj.error);\n        return;\n      }\n    });\n\n    // This will happen on the component unmount i.e. when the user leaves the chat\n    return () => {\n      // Bann bann að kalla á emit með disconnect skv. documentation?\n      // socket.emit('disconnect');\n      // Turns the socket instance off\n      socket.disconnect();\n    }\n  }, [ENDPOINT, props.chatData]);\n\n  // Runs at mount and each time messages update\n  useEffect(() => {\n    socket.on('message', (message) => {\n      setMessages(messages => [...messages, message]);\n    });\n    //console.log('MsgsLen: ' + messages.length);\n  }, []);\n\n  //console.log('msgs: ' + messages);\n  // Function for sending messages\n  function sendMessage(ev) {\n    ev.preventDefault();\n    const messageSent = `${new Date().getHours()}:${new Date().getMinutes()}`;\n    const messageObj = {text: message, timeStamp: messageSent};\n\n    if(message) {\n      socket.emit('sendMessage', messageObj, () => setMessage('')); // Last parameter is the callback that is called in the server 'sendMessage' event and once its called message is set to ''\n    }\n  }\n\n  //console.log(message, messages);\n  const msgList = messages.map((msg, index) => <li key={index + msg.user}><span className=\"chat__user\">{msg.timeStamp + ' [' + msg.user + '] '}</span>{' - ' + msg.text}</li>);\n\n  return (\n    <>\n      <div className=\"chat__messages\">\n        <ul>\n          {\n            msgList\n          }\n        </ul>\n        <div className=\"input__wrapper\">\n          <p className=\"chat__goggurinn\">{\">\"}</p>\n          <input className=\"chat__input\" autoFocus value={message} onChange={(ev) => setMessage(ev.target.value)} onKeyPress={(ev) => ev.key === 'Enter' ? sendMessage(ev) : null} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Chat;","/Users/ariagnarsson/Documents/Code/Mod4/crypt/src/components/Currency.js",[],{"ruleId":"24","severity":1,"message":"25","line":29,"column":6,"nodeType":"26","endLine":29,"endColumn":8,"suggestions":"27"},{"ruleId":"28","severity":1,"message":"29","line":51,"column":13,"nodeType":"30","endLine":51,"endColumn":140},{"ruleId":"28","severity":1,"message":"29","line":56,"column":11,"nodeType":"30","endLine":56,"endColumn":113},{"ruleId":"31","severity":1,"message":"32","line":9,"column":10,"nodeType":"33","messageId":"34","endLine":9,"endColumn":18},{"ruleId":"31","severity":1,"message":"35","line":9,"column":20,"nodeType":"33","messageId":"34","endLine":9,"endColumn":31},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isMobile'. Either include it or remove the dependency array.","ArrayExpression",["36"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'userList' is assigned a value but never used.","Identifier","unusedVar","'setUserList' is assigned a value but never used.",{"desc":"37","fix":"38"},"Update the dependencies array to be: [isMobile]",{"range":"39","text":"40"},[896,898],"[isMobile]"]